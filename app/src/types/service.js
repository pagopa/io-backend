// @flow

"use strict";

import t from "flow-runtime";
import { ServicePublic } from "../api/models";
import { NonNegativeNumberType } from "./genericTypes";

const ServiceModel = t.object(
  t.property("serviceId", t.string()),
  t.property("serviceName", t.string()),
  t.property("organizationName", t.string()),
  t.property("departmentName", t.string()),
  t.property("version", NonNegativeNumberType)
);

export type Service = t.TypeOf<typeof ServiceModel>;

/**
 * Converts an API ServicePublic to a Proxy service.
 *
 * ServicePublic is generated by the autorest tool and is returned by and API
 * call. Here we map all properties of ServicePublic to the proxy's Service
 * model that will ensure type validation in the rest of the proxy code.
 *
 * @param from
 * @returns {Service}
 */
export function ServicePublicToAppService(from: ServicePublic): Service {
  return {
    serviceId: from.serviceId,
    serviceName: from.serviceName,
    organizationName: from.organizationName,
    departmentName: from.departmentName,
    version: from.version
  };
}
