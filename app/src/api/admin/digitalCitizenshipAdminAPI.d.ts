/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from "./models";

declare class DigitalCitizenshipAdminAPI extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the DigitalCitizenshipAdminAPI class.
   * @constructor
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(baseUri?: string, options?: ServiceClientOptions);


  /**
   * @summary Get Service
   *
   * A previously created service with the provided service ID is returned.
   *
   * @param {string} serviceId The ID of an existing Service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getServiceWithHttpOperationResponse(serviceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Get Service
   *
   * A previously created service with the provided service ID is returned.
   *
   * @param {string} serviceId The ID of an existing Service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getService(serviceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getService(serviceId: string, callback: ServiceCallback<any>): void;
  getService(serviceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Update Service
   *
   * Update an existing service with the attributes provided in the request
   * payload.
   *
   * @param {string} serviceId The ID of an existing Service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.body] The Service payload.
   *
   * @param {string} options.body.serviceId
   *
   * @param {string} options.body.serviceName
   *
   * @param {string} options.body.organizationName
   *
   * @param {string} options.body.departmentName
   *
   * @param {array} options.body.authorizedCidrs
   *
   * @param {array} options.body.authorizedRecipients
   *
   * @param {number} [options.body.version]
   *
   * @param {string} [options.body.id]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Service>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateServiceWithHttpOperationResponse(serviceId: string, options?: { body? : models.Service, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Service>>;

  /**
   * @summary Update Service
   *
   * Update an existing service with the attributes provided in the request
   * payload.
   *
   * @param {string} serviceId The ID of an existing Service.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.body] The Service payload.
   *
   * @param {string} options.body.serviceId
   *
   * @param {string} options.body.serviceName
   *
   * @param {string} options.body.organizationName
   *
   * @param {string} options.body.departmentName
   *
   * @param {array} options.body.authorizedCidrs
   *
   * @param {array} options.body.authorizedRecipients
   *
   * @param {number} [options.body.version]
   *
   * @param {string} [options.body.id]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Service} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Service} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Service} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateService(serviceId: string, options?: { body? : models.Service, customHeaders? : { [headerName: string]: string; } }): Promise<models.Service>;
  updateService(serviceId: string, callback: ServiceCallback<models.Service>): void;
  updateService(serviceId: string, options: { body? : models.Service, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Service>): void;


  /**
   * @summary Debug GET
   *
   * An endpoint to debug GET requests to the API backend.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDebugWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Debug GET
   *
   * An endpoint to debug GET requests to the API backend.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDebug(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getDebug(callback: ServiceCallback<any>): void;
  getDebug(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Debug POST
   *
   * An endpoint to debug POST requests to the API backend.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  postDebugWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Debug POST
   *
   * An endpoint to debug POST requests to the API backend.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  postDebug(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  postDebug(callback: ServiceCallback<any>): void;
  postDebug(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Create Service
   *
   * Create a new Service with the attributes provided in the requst payload.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.body] The Service payload.
   *
   * @param {string} options.body.serviceId
   *
   * @param {string} options.body.serviceName
   *
   * @param {string} options.body.organizationName
   *
   * @param {string} options.body.departmentName
   *
   * @param {array} options.body.authorizedCidrs
   *
   * @param {array} options.body.authorizedRecipients
   *
   * @param {number} [options.body.version]
   *
   * @param {string} [options.body.id]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Service>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createServiceWithHttpOperationResponse(options?: { body? : models.Service, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Service>>;

  /**
   * @summary Create Service
   *
   * Create a new Service with the attributes provided in the requst payload.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.body] The Service payload.
   *
   * @param {string} options.body.serviceId
   *
   * @param {string} options.body.serviceName
   *
   * @param {string} options.body.organizationName
   *
   * @param {string} options.body.departmentName
   *
   * @param {array} options.body.authorizedCidrs
   *
   * @param {array} options.body.authorizedRecipients
   *
   * @param {number} [options.body.version]
   *
   * @param {string} [options.body.id]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Service} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Service} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Service} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createService(options?: { body? : models.Service, customHeaders? : { [headerName: string]: string; } }): Promise<models.Service>;
  createService(callback: ServiceCallback<models.Service>): void;
  createService(options: { body? : models.Service, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Service>): void;
}

export = DigitalCitizenshipAdminAPI;
