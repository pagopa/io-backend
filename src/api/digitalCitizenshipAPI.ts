/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
const WebResource = msRest.WebResource;

const packageName = "";
const packageVersion = "";

class DigitalCitizenshipAPI extends msRest.ServiceClient {
  cursor?: string;
  fiscalCode: string;
  credentials: msRest.ServiceClientCredentials;
  baseUri: string;
  serializer: msRest.Serializer;

  /**
   * @class
   * Initializes a new instance of the DigitalCitizenshipAPI class.
   * @constructor
   *
   * @param {string} fiscalCode - The fiscal code of the user, all upper case.
   *
   * @param {msRest.ServiceClientCredentials} credentials - Subscription credentials which uniquely identify client subscription.
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@link https://github.github.io/fetch/#Request Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   * @param {string} [options.cursor] - An opaque identifier that points to the next item in the collection.
   *
   */
  constructor(
    fiscalCode: string,
    credentials: msRest.ServiceClientCredentials,
    baseUri?: string,
    options?: Models.DigitalCitizenshipAPIOptions
  ) {
    if (fiscalCode === null || fiscalCode === undefined) {
      throw new Error("'fiscalCode' cannot be null.");
    }
    if (credentials === null || credentials === undefined) {
      throw new Error("'credentials' cannot be null.");
    }

    if (!options) options = {};

    super(credentials, options);

    this.baseUri = baseUri as string;
    if (!this.baseUri) {
      this.baseUri = "https://localhost/api/v1";
    }
    this.fiscalCode = fiscalCode;
    this.credentials = credentials;

    this.addUserAgentInfo(`${packageName}/${packageVersion}`);
    if (options.cursor !== null && options.cursor !== undefined) {
      this.cursor = options.cursor;
    }
    this.serializer = new msRest.Serializer(Mappers);
  }
  // methods on the client.

  /**
   * @summary Get Service
   *
   * A previously created service with the provided service ID is returned.
   *
   * @param {string} serviceId The ID of an existing Service.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getServiceWithHttpOperationResponse(
    serviceId: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.HttpOperationResponse> {
    let client = this;
    // Validate
    try {
      if (
        serviceId === null ||
        serviceId === undefined ||
        typeof serviceId.valueOf() !== "string"
      ) {
        throw new Error(
          "serviceId cannot be null or undefined and it must be of type string."
        );
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.baseUri;
    let requestUrl =
      baseUrl + (baseUrl.endsWith("/") ? "" : "/") + "services/{service_id}";
    requestUrl = requestUrl.replace(
      "{service_id}",
      encodeURIComponent(serviceId)
    );

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = "GET";
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers["Content-Type"] = "application/json; charset=utf-8";
    if (options && options.customHeaders) {
      for (let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200 && statusCode !== 404) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as {
          [key: string]: any;
        };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error)
              internalError = parsedErrorResponse.error;
            error.code = internalError
              ? internalError.code
              : parsedErrorResponse.code;
            error.message = internalError
              ? internalError.message
              : parsedErrorResponse.message;
          }
        } catch (defaultError) {
          error.message =
            `Error "${
              defaultError.message
            }" occurred in deserializing the responseBody ` +
            `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.ServicePublic;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }
    } catch (err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }
  // methods on the client.

  /**
   * @summary Get Message
   *
   * The previously created message with the provided message ID is returned.
   *
   * @param {string} id The ID of the message.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getMessageWithHttpOperationResponse(
    id: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.HttpOperationResponse> {
    let client = this;
    // Validate
    try {
      if (
        this.fiscalCode === null ||
        this.fiscalCode === undefined ||
        typeof this.fiscalCode.valueOf() !== "string"
      ) {
        throw new Error(
          "this.fiscalCode cannot be null or undefined and it must be of type string."
        );
      }
      if (this.fiscalCode !== null && this.fiscalCode !== undefined) {
        if (this.fiscalCode.length > 16) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "MaxLength": 16'
          );
        }
        if (this.fiscalCode.length < 16) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "MinLength": 16'
          );
        }
        if (
          this.fiscalCode.match(
            /[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]/
          ) === null
        ) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "Pattern": /[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]/'
          );
        }
      }
      if (id === null || id === undefined || typeof id.valueOf() !== "string") {
        throw new Error(
          "id cannot be null or undefined and it must be of type string."
        );
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.baseUri;
    let requestUrl =
      baseUrl +
      (baseUrl.endsWith("/") ? "" : "/") +
      "messages/{fiscal_code}/{id}";
    requestUrl = requestUrl.replace(
      "{fiscal_code}",
      encodeURIComponent(this.fiscalCode)
    );
    requestUrl = requestUrl.replace("{id}", encodeURIComponent(id));

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = "GET";
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers["Content-Type"] = "application/json; charset=utf-8";
    if (options && options.customHeaders) {
      for (let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200 && statusCode !== 404) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as {
          [key: string]: any;
        };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error)
              internalError = parsedErrorResponse.error;
            error.code = internalError
              ? internalError.code
              : parsedErrorResponse.code;
            error.message = internalError
              ? internalError.message
              : parsedErrorResponse.message;
          }
        } catch (defaultError) {
          error.message =
            `Error "${
              defaultError.message
            }" occurred in deserializing the responseBody ` +
            `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.MessageResponseWithContent;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }
      // Deserialize Response
      if (statusCode === 404) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.ProblemJson;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError1 = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError1.request = msRest.stripRequest(httpRequest);
          deserializationError1.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError1);
        }
      }
    } catch (err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }
  // methods on the client.

  /**
   * @summary Get messages by user
   *
   * Returns the messages for the user identified by the provided fiscal code.
   * Messages will be returned in inverse acceptance order (from last to first).
   * The "next" field, when present, contains an URL pointing to the next page of
   * results.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getMessagesByUserWithHttpOperationResponse(
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.HttpOperationResponse> {
    let client = this;
    // Validate
    try {
      if (
        this.cursor !== null &&
        this.cursor !== undefined &&
        typeof this.cursor.valueOf() !== "string"
      ) {
        throw new Error("this.cursor must be of type string.");
      }
      if (
        this.fiscalCode === null ||
        this.fiscalCode === undefined ||
        typeof this.fiscalCode.valueOf() !== "string"
      ) {
        throw new Error(
          "this.fiscalCode cannot be null or undefined and it must be of type string."
        );
      }
      if (this.fiscalCode !== null && this.fiscalCode !== undefined) {
        if (this.fiscalCode.length > 16) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "MaxLength": 16'
          );
        }
        if (this.fiscalCode.length < 16) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "MinLength": 16'
          );
        }
        if (
          this.fiscalCode.match(
            /[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]/
          ) === null
        ) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "Pattern": /[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]/'
          );
        }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.baseUri;
    let requestUrl =
      baseUrl + (baseUrl.endsWith("/") ? "" : "/") + "messages/{fiscal_code}";
    requestUrl = requestUrl.replace(
      "{fiscal_code}",
      encodeURIComponent(this.fiscalCode)
    );
    let queryParamsArray: Array<any> = [];
    if (this.cursor !== null && this.cursor !== undefined) {
      queryParamsArray.push("cursor=" + encodeURIComponent(this.cursor));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += "?" + queryParamsArray.join("&");
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = "GET";
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers["Content-Type"] = "application/json; charset=utf-8";
    if (options && options.customHeaders) {
      for (let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200 && statusCode !== 404) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as {
          [key: string]: any;
        };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error)
              internalError = parsedErrorResponse.error;
            error.code = internalError
              ? internalError.code
              : parsedErrorResponse.code;
            error.message = internalError
              ? internalError.message
              : parsedErrorResponse.message;
          }
        } catch (defaultError) {
          error.message =
            `Error "${
              defaultError.message
            }" occurred in deserializing the responseBody ` +
            `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.GetMessagesByUserOKResponse;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }
      // Deserialize Response
      if (statusCode === 404) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.ProblemJson;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError1 = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError1.request = msRest.stripRequest(httpRequest);
          deserializationError1.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError1);
        }
      }
    } catch (err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }
  // methods on the client.

  /**
   * @summary Submit a message
   *
   * Submits a message to a user.
   * On error, the reason is returned in the response payload.
   *
   * @param {DigitalCitizenshipAPISubmitMessageforUserOptionalParams} [options]
   * Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async submitMessageforUserWithHttpOperationResponse(
    options?: Models.DigitalCitizenshipAPISubmitMessageforUserOptionalParams
  ): Promise<msRest.HttpOperationResponse> {
    let client = this;
    let message =
      options && options.message !== undefined ? options.message : undefined;
    // Validate
    try {
      if (
        this.fiscalCode === null ||
        this.fiscalCode === undefined ||
        typeof this.fiscalCode.valueOf() !== "string"
      ) {
        throw new Error(
          "this.fiscalCode cannot be null or undefined and it must be of type string."
        );
      }
      if (this.fiscalCode !== null && this.fiscalCode !== undefined) {
        if (this.fiscalCode.length > 16) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "MaxLength": 16'
          );
        }
        if (this.fiscalCode.length < 16) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "MinLength": 16'
          );
        }
        if (
          this.fiscalCode.match(
            /[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]/
          ) === null
        ) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "Pattern": /[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]/'
          );
        }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.baseUri;
    let requestUrl =
      baseUrl + (baseUrl.endsWith("/") ? "" : "/") + "messages/{fiscal_code}";
    requestUrl = requestUrl.replace(
      "{fiscal_code}",
      encodeURIComponent(this.fiscalCode)
    );

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = "POST";
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers["Content-Type"] = "application/json; charset=utf-8";
    if (options && options.customHeaders) {
      for (let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (message !== null && message !== undefined) {
        let requestModelMapper = Mappers.NewMessage;
        requestModel = client.serializer.serialize(
          requestModelMapper,
          message,
          "message"
        );
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(
        `Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(message, null, 2)}.`
      );
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 201 && statusCode !== 400 && statusCode !== 500) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as {
          [key: string]: any;
        };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error)
              internalError = parsedErrorResponse.error;
            error.code = internalError
              ? internalError.code
              : parsedErrorResponse.code;
            error.message = internalError
              ? internalError.message
              : parsedErrorResponse.message;
          }
        } catch (defaultError) {
          error.message =
            `Error "${
              defaultError.message
            }" occurred in deserializing the responseBody ` +
            `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 400) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.ProblemJson;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }
      // Deserialize Response
      if (statusCode === 500) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.ProblemJson;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError1 = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError1.request = msRest.stripRequest(httpRequest);
          deserializationError1.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError1);
        }
      }
    } catch (err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }
  // methods on the client.

  /**
   * @summary Get User's Preferences
   *
   * Returns the preferences for the user identified by the provided fiscal code.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getProfileWithHttpOperationResponse(
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.HttpOperationResponse> {
    let client = this;
    // Validate
    try {
      if (
        this.fiscalCode === null ||
        this.fiscalCode === undefined ||
        typeof this.fiscalCode.valueOf() !== "string"
      ) {
        throw new Error(
          "this.fiscalCode cannot be null or undefined and it must be of type string."
        );
      }
      if (this.fiscalCode !== null && this.fiscalCode !== undefined) {
        if (this.fiscalCode.length > 16) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "MaxLength": 16'
          );
        }
        if (this.fiscalCode.length < 16) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "MinLength": 16'
          );
        }
        if (
          this.fiscalCode.match(
            /[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]/
          ) === null
        ) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "Pattern": /[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]/'
          );
        }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.baseUri;
    let requestUrl =
      baseUrl + (baseUrl.endsWith("/") ? "" : "/") + "profiles/{fiscal_code}";
    requestUrl = requestUrl.replace(
      "{fiscal_code}",
      encodeURIComponent(this.fiscalCode)
    );

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = "GET";
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers["Content-Type"] = "application/json; charset=utf-8";
    if (options && options.customHeaders) {
      for (let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200 && statusCode !== 404) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as {
          [key: string]: any;
        };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error)
              internalError = parsedErrorResponse.error;
            error.code = internalError
              ? internalError.code
              : parsedErrorResponse.code;
            error.message = internalError
              ? internalError.message
              : parsedErrorResponse.message;
          }
        } catch (defaultError) {
          error.message =
            `Error "${
              defaultError.message
            }" occurred in deserializing the responseBody ` +
            `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.GetProfileOKResponse;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }
      // Deserialize Response
      if (statusCode === 404) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.ProblemJson;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError1 = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError1.request = msRest.stripRequest(httpRequest);
          deserializationError1.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError1);
        }
      }
    } catch (err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }
  // methods on the client.

  /**
   * @summary Set User's Preferences
   *
   * Create or update the preferences for the user identified by the provided
   * fiscal code.
   *
   * @param {DigitalCitizenshipAPIUpsertProfileOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async upsertProfileWithHttpOperationResponse(
    options?: Models.DigitalCitizenshipAPIUpsertProfileOptionalParams
  ): Promise<msRest.HttpOperationResponse> {
    let client = this;
    let body = options && options.body !== undefined ? options.body : undefined;
    // Validate
    try {
      if (
        this.fiscalCode === null ||
        this.fiscalCode === undefined ||
        typeof this.fiscalCode.valueOf() !== "string"
      ) {
        throw new Error(
          "this.fiscalCode cannot be null or undefined and it must be of type string."
        );
      }
      if (this.fiscalCode !== null && this.fiscalCode !== undefined) {
        if (this.fiscalCode.length > 16) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "MaxLength": 16'
          );
        }
        if (this.fiscalCode.length < 16) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "MinLength": 16'
          );
        }
        if (
          this.fiscalCode.match(
            /[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]/
          ) === null
        ) {
          throw new Error(
            '"this.fiscalCode" should satisfy the constraint - "Pattern": /[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]/'
          );
        }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.baseUri;
    let requestUrl =
      baseUrl + (baseUrl.endsWith("/") ? "" : "/") + "profiles/{fiscal_code}";
    requestUrl = requestUrl.replace(
      "{fiscal_code}",
      encodeURIComponent(this.fiscalCode)
    );

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = "POST";
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers["Content-Type"] = "application/json; charset=utf-8";
    if (options && options.customHeaders) {
      for (let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (body !== null && body !== undefined) {
        let requestModelMapper = Mappers.ExtendedProfile;
        requestModel = client.serializer.serialize(
          requestModelMapper,
          body,
          "body"
        );
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(
        `Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(body, null, 2)}.`
      );
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200 && statusCode !== 400 && statusCode !== 500) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as {
          [key: string]: any;
        };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error)
              internalError = parsedErrorResponse.error;
            error.code = internalError
              ? internalError.code
              : parsedErrorResponse.code;
            error.message = internalError
              ? internalError.message
              : parsedErrorResponse.message;
          }
        } catch (defaultError) {
          error.message =
            `Error "${
              defaultError.message
            }" occurred in deserializing the responseBody ` +
            `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.UpsertProfileOKResponse;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }
      // Deserialize Response
      if (statusCode === 400) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.ProblemJson;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError1 = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError1.request = msRest.stripRequest(httpRequest);
          deserializationError1.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError1);
        }
      }
      // Deserialize Response
      if (statusCode === 500) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.ProblemJson;
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError2 = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError2.request = msRest.stripRequest(httpRequest);
          deserializationError2.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError2);
        }
      }
    } catch (err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }
  // methods on the client.

  /**
   * @summary API test endpoint
   *
   * An endpoint to test authenticated access to the API backend.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getInfoWithHttpOperationResponse(
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.HttpOperationResponse> {
    let client = this;

    // Construct URL
    let baseUrl = this.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith("/") ? "" : "/") + "info";

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = "GET";
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers["Content-Type"] = "application/json; charset=utf-8";
    if (options && options.customHeaders) {
      for (let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200 && statusCode !== 401) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as {
          [key: string]: any;
        };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error)
              internalError = parsedErrorResponse.error;
            error.code = internalError
              ? internalError.code
              : parsedErrorResponse.code;
            error.message = internalError
              ? internalError.message
              : parsedErrorResponse.message;
          }
        } catch (defaultError) {
          error.message =
            `Error "${
              defaultError.message
            }" occurred in deserializing the responseBody ` +
            `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = {
              required: false,
              serializedName: "parsedResponse",
              type: {
                name: "Object"
              }
            };
            operationRes.bodyAsJson = client.serializer.deserialize(
              resultMapper,
              parsedResponse,
              "operationRes.bodyAsJson"
            );
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(
            `Error ${error} occurred in deserializing the responseBody - ${
              operationRes.bodyAsText
            }`
          );
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }
    } catch (err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Get Service
   *
   * A previously created service with the provided service ID is returned.
   *
   * @param {string} serviceId The ID of an existing Service.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.ServicePublic} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ServicePublic} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getService(serviceId: string): Promise<Models.ServicePublic>;
  getService(
    serviceId: string,
    options: msRest.RequestOptionsBase
  ): Promise<Models.ServicePublic>;
  getService(
    serviceId: string,
    callback: msRest.ServiceCallback<Models.ServicePublic>
  ): void;
  getService(
    serviceId: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.ServicePublic>
  ): void;
  getService(
    serviceId: string,
    options?: msRest.RequestOptionsBase,
    callback?: msRest.ServiceCallback<Models.ServicePublic>
  ): any {
    if (!callback && typeof options === "function") {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.ServicePublic>;
    if (!callback) {
      return this.getServiceWithHttpOperationResponse(serviceId, options)
        .then((operationRes: msRest.HttpOperationResponse) => {
          return Promise.resolve(
            operationRes.bodyAsJson as Models.ServicePublic
          );
        })
        .catch((err: Error) => {
          return Promise.reject(err);
        });
    } else {
      msRest.promiseToCallback(
        this.getServiceWithHttpOperationResponse(serviceId, options)
      )((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.ServicePublic;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Get Message
   *
   * The previously created message with the provided message ID is returned.
   *
   * @param {string} id The ID of the message.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getMessage(id: string): Promise<any>;
  getMessage(id: string, options: msRest.RequestOptionsBase): Promise<any>;
  getMessage(id: string, callback: msRest.ServiceCallback<any>): void;
  getMessage(
    id: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<any>
  ): void;
  getMessage(
    id: string,
    options?: msRest.RequestOptionsBase,
    callback?: msRest.ServiceCallback<any>
  ): any {
    if (!callback && typeof options === "function") {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<any>;
    if (!callback) {
      return this.getMessageWithHttpOperationResponse(id, options)
        .then((operationRes: msRest.HttpOperationResponse) => {
          return Promise.resolve(operationRes.bodyAsJson as any);
        })
        .catch((err: Error) => {
          return Promise.reject(err);
        });
    } else {
      msRest.promiseToCallback(
        this.getMessageWithHttpOperationResponse(id, options)
      )((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as any;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Get messages by user
   *
   * Returns the messages for the user identified by the provided fiscal code.
   * Messages will be returned in inverse acceptance order (from last to first).
   * The "next" field, when present, contains an URL pointing to the next page of
   * results.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getMessagesByUser(): Promise<any>;
  getMessagesByUser(options: msRest.RequestOptionsBase): Promise<any>;
  getMessagesByUser(callback: msRest.ServiceCallback<any>): void;
  getMessagesByUser(
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<any>
  ): void;
  getMessagesByUser(
    options?: msRest.RequestOptionsBase,
    callback?: msRest.ServiceCallback<any>
  ): any {
    if (!callback && typeof options === "function") {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<any>;
    if (!callback) {
      return this.getMessagesByUserWithHttpOperationResponse(options)
        .then((operationRes: msRest.HttpOperationResponse) => {
          return Promise.resolve(operationRes.bodyAsJson as any);
        })
        .catch((err: Error) => {
          return Promise.reject(err);
        });
    } else {
      msRest.promiseToCallback(
        this.getMessagesByUserWithHttpOperationResponse(options)
      )((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as any;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Submit a message
   *
   * Submits a message to a user.
   * On error, the reason is returned in the response payload.
   *
   * @param {DigitalCitizenshipAPISubmitMessageforUserOptionalParams} [options]
   * Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.ProblemJson} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ProblemJson} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  submitMessageforUser(): Promise<Models.ProblemJson>;
  submitMessageforUser(
    options: Models.DigitalCitizenshipAPISubmitMessageforUserOptionalParams
  ): Promise<Models.ProblemJson>;
  submitMessageforUser(
    callback: msRest.ServiceCallback<Models.ProblemJson>
  ): void;
  submitMessageforUser(
    options: Models.DigitalCitizenshipAPISubmitMessageforUserOptionalParams,
    callback: msRest.ServiceCallback<Models.ProblemJson>
  ): void;
  submitMessageforUser(
    options?: Models.DigitalCitizenshipAPISubmitMessageforUserOptionalParams,
    callback?: msRest.ServiceCallback<Models.ProblemJson>
  ): any {
    if (!callback && typeof options === "function") {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.ProblemJson>;
    if (!callback) {
      return this.submitMessageforUserWithHttpOperationResponse(options)
        .then((operationRes: msRest.HttpOperationResponse) => {
          return Promise.resolve(operationRes.bodyAsJson as Models.ProblemJson);
        })
        .catch((err: Error) => {
          return Promise.reject(err);
        });
    } else {
      msRest.promiseToCallback(
        this.submitMessageforUserWithHttpOperationResponse(options)
      )((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.ProblemJson;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Get User's Preferences
   *
   * Returns the preferences for the user identified by the provided fiscal code.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getProfile(): Promise<any>;
  getProfile(options: msRest.RequestOptionsBase): Promise<any>;
  getProfile(callback: msRest.ServiceCallback<any>): void;
  getProfile(
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<any>
  ): void;
  getProfile(
    options?: msRest.RequestOptionsBase,
    callback?: msRest.ServiceCallback<any>
  ): any {
    if (!callback && typeof options === "function") {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<any>;
    if (!callback) {
      return this.getProfileWithHttpOperationResponse(options)
        .then((operationRes: msRest.HttpOperationResponse) => {
          return Promise.resolve(operationRes.bodyAsJson as any);
        })
        .catch((err: Error) => {
          return Promise.reject(err);
        });
    } else {
      msRest.promiseToCallback(
        this.getProfileWithHttpOperationResponse(options)
      )((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as any;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Set User's Preferences
   *
   * Create or update the preferences for the user identified by the provided
   * fiscal code.
   *
   * @param {DigitalCitizenshipAPIUpsertProfileOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  upsertProfile(): Promise<any>;
  upsertProfile(
    options: Models.DigitalCitizenshipAPIUpsertProfileOptionalParams
  ): Promise<any>;
  upsertProfile(callback: msRest.ServiceCallback<any>): void;
  upsertProfile(
    options: Models.DigitalCitizenshipAPIUpsertProfileOptionalParams,
    callback: msRest.ServiceCallback<any>
  ): void;
  upsertProfile(
    options?: Models.DigitalCitizenshipAPIUpsertProfileOptionalParams,
    callback?: msRest.ServiceCallback<any>
  ): any {
    if (!callback && typeof options === "function") {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<any>;
    if (!callback) {
      return this.upsertProfileWithHttpOperationResponse(options)
        .then((operationRes: msRest.HttpOperationResponse) => {
          return Promise.resolve(operationRes.bodyAsJson as any);
        })
        .catch((err: Error) => {
          return Promise.reject(err);
        });
    } else {
      msRest.promiseToCallback(
        this.upsertProfileWithHttpOperationResponse(options)
      )((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as any;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary API test endpoint
   *
   * An endpoint to test authenticated access to the API backend.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getInfo(): Promise<any>;
  getInfo(options: msRest.RequestOptionsBase): Promise<any>;
  getInfo(callback: msRest.ServiceCallback<any>): void;
  getInfo(
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<any>
  ): void;
  getInfo(
    options?: msRest.RequestOptionsBase,
    callback?: msRest.ServiceCallback<any>
  ): any {
    if (!callback && typeof options === "function") {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<any>;
    if (!callback) {
      return this.getInfoWithHttpOperationResponse(options)
        .then((operationRes: msRest.HttpOperationResponse) => {
          return Promise.resolve(operationRes.bodyAsJson as any);
        })
        .catch((err: Error) => {
          return Promise.reject(err);
        });
    } else {
      msRest.promiseToCallback(this.getInfoWithHttpOperationResponse(options))(
        (err: Error, data: msRest.HttpOperationResponse) => {
          if (err) {
            return cb(err);
          }
          let result = data.bodyAsJson as any;
          return cb(err, result, data.request, data.response);
        }
      );
    }
  }
}

export {
  DigitalCitizenshipAPI,
  Models as DigitalCitizenshipAPIModels,
  Mappers as DigitalCitizenshipAPIMappers
};
