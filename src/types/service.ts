/**
 * This file contains the Service model and some functions to
 * validate and convert type to and from it.
 */

import * as t from "io-ts";
import { string } from "io-ts";
import { NonNegativeNumber } from "../utils/numbers";
import { strictInterfaceWithOptionals } from "../utils/types";
import { ServicePublic } from "./api_client/servicePublic";

// required attributes
export const ServiceR = t.interface({
  departmentName: string,
  organizationName: string,
  serviceId: string,
  serviceName: string
});

// optional attributes
const ServiceO = t.partial({
  version: NonNegativeNumber
});

export const Service = strictInterfaceWithOptionals(
  ServiceR.props,
  ServiceO.props,
  "Service"
);

export type Service = t.TypeOf<typeof Service>;

/**
 * Converts an API ServicePublic to a Proxy service.
 *
 * ServicePublic is generated by the autorest tool and is returned by and API
 * call. Here we map all properties of ServicePublic to the proxy's Service
 * model that will ensure type validation in the rest of the proxy code.
 */
export function toAppService(from: ServicePublic): Service {
  return {
    departmentName: from.departmentName,
    organizationName: from.organizationName,
    serviceId: from.serviceId,
    serviceName: from.serviceName,
    version: from.version
  };
}
