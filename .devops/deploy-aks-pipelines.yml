# Azure DevOps pipeline to release a new version and deploy to production.

variables:
  NAMESPACE: "$(TF_NAMESPACE)"
  DOCKER_IMAGE_NAME: "$(TF_DOCKER_IMAGE_NAME)"
  CONTAINER_REGISTRY_FQDN_PROD: "$(TF_CONTAINER_REGISTRY_FQDN_PROD)"
  CONTAINER_REGISTRY_SERVICE_CONN_PROD: "$(TF_CONTAINER_REGISTRY_SERVICE_CONN_PROD)"
  KUBERNETES_SERVICE_CONN_WEU_BETA: "$(TF_KUBERNETES_SERVICE_CONN_WEU_BETA)"
  KUBERNETES_SERVICE_CONN_WEU_PROD_01: "$(TF_KUBERNETES_SERVICE_CONN_WEU_PROD_01)"
  KUBERNETES_SERVICE_CONN_WEU_PROD_02: "$(TF_KUBERNETES_SERVICE_CONN_WEU_PROD_02)"
  APPINSIGHTS_SERVICE_CONN_PROD: "$(TF_APPINSIGHTS_SERVICE_CONN_PROD)"
  APPINSIGHTS_RESOURCE_ID_PROD: "$(TF_APPINSIGHTS_RESOURCE_ID_PROD)"

parameters:
  - name: "RELEASE_SEMVER"
    displayName: "When packing a release, define the version bump to apply"
    type: string
    values:
      - major
      - minor
      - patch
    default: minor
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "SKIP_RELEASE"
    displayName: "Skip release"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "ENVIRONMENT_WEU_BETA"
    displayName: "Deploy to weu-beta"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: "ENVIRONMENT_WEU_PROD_01"
    displayName: "Deploy to weu-prod-01"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: "ENVIRONMENT_WEU_PROD_02"
    displayName: "Deploy to weu-prod-02"
    type: boolean
    default: False
    values:
      - False
      - True

# Only manual activations are intended
trigger: none
pr: none

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: "azure-devops-github-ro-payments"

pool:
  vmImage: "ubuntu-latest"

stages:
  # Release
  - stage: Release
    jobs:
      - job: make_release
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        steps:
          - ${{ if eq(parameters['SKIP_RELEASE'], False) }}:
              - template: templates/node-job-setup/template.yaml@pagopaCommons
                parameters:
                  persistCredentials: true
              - template: templates/node-github-release/template.yaml@pagopaCommons
                parameters:
                  semver: "${{ parameters.RELEASE_SEMVER }}"
                  gitEmail: $(GIT_EMAIL)
                  gitUsername: $(GIT_USERNAME)
                  gitHubConnection: $(GITHUB_CONNECTION)
                  release_branch: master
          - ${{ if eq(parameters['SKIP_RELEASE'], True) }}:
              - template: templates/node-github-current-version/template.yaml@pagopaCommons
      - job: branch_version
        condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
        steps:
          - template: templates/node-github-current-version/template.yaml@pagopaCommons
      - job: tag_version
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
        steps:
          - template: templates/node-github-current-version/template.yaml@pagopaCommons

  # Build
  - stage: Build
    dependsOn: Release
    variables:
      next_version: $[ stageDependencies.Release.make_release.outputs['next_version.value'] ]
      current_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
      current_version_branch: $[ stageDependencies.Release.branch_version.outputs['current_version.value'] ]
      current_version_tag: $[ stageDependencies.Release.tag_version.outputs['current_version.value'] ]
    jobs:
      - job: "build"
        steps:
          - template: templates/deploy-release-decision/template.yaml@pagopaCommons
            parameters:
              NEXT_VERSION: $(next_version)
              CURRENT_VERSION: $(current_version)
              CURRENT_VERSION_BRANCH: $(current_version_branch)
              CURRENT_VERSION_TAG: $(current_version_tag)
              BUILD_SOURCE_VERSION: $(Build.SourceVersion)
              BUILD_SOURCE_BRANCH_NAME: $(Build.SourceBranchName)
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(CONTAINER_REGISTRY_SERVICE_CONN_PROD)
              CONTAINER_REGISTRY_FQDN: $(CONTAINER_REGISTRY_FQDN_PROD)
              DOCKER_IMAGE_NAME: $(DOCKER_IMAGE_NAME)
              DOCKER_IMAGE_TAG: $(deploy_version_decision.value)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}

  # Deploy
  - stage: "Deploy"
    dependsOn: "Build"
    variables:
      deploy_version: $[ stageDependencies.Build.build.outputs['deploy_version_decision.value'] ]
    jobs:
      - deployment: "deploy"
        pool:
          name: io-prod-linux
        environment: PROD
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - template: templates/helm-microservice-chart-setup/template.yaml@pagopaCommons
                  parameters:
                    DEPLOY_VERSION: $(deploy_version)
                - template: templates/helm-microservice-chart-deploy/template.yaml@pagopaCommons
                  parameters:
                    DO_DEPLOY: ${{ parameters.ENVIRONMENT_WEU_BETA }}
                    ENV: BETA
                    KUBERNETES_SERVICE_CONN: ${{ variables.KUBERNETES_SERVICE_CONN_WEU_BETA }}
                    NAMESPACE: $(NAMESPACE)
                    APP_NAME: $(DOCKER_IMAGE_NAME)
                    VALUE_FILE: "helm/values-beta.yaml"
                    DEPLOY_VERSION: $(deploy_version)
                    APPINSIGHTS_SERVICE_CONN: ${{ variables.APPINSIGHTS_SERVICE_CONN_PROD }}
                    APPINSIGHTS_RESOURCE_ID: ${{ variables.APPINSIGHTS_RESOURCE_ID_PROD }}
                - template: templates/helm-microservice-chart-deploy/template.yaml@pagopaCommons
                  parameters:
                    DO_DEPLOY: ${{ parameters.ENVIRONMENT_WEU_PROD_01 }}
                    ENV: PROD_01
                    KUBERNETES_SERVICE_CONN: ${{ variables.KUBERNETES_SERVICE_CONN_WEU_PROD_01 }}
                    NAMESPACE: $(NAMESPACE)
                    APP_NAME: $(DOCKER_IMAGE_NAME)
                    VALUE_FILE: "helm/values-prod01.yaml"
                    DEPLOY_VERSION: $(deploy_version)
                    APPINSIGHTS_SERVICE_CONN: ${{ variables.APPINSIGHTS_SERVICE_CONN_PROD }}
                    APPINSIGHTS_RESOURCE_ID: ${{ variables.APPINSIGHTS_RESOURCE_ID_PROD }}
