# Azure DevOps pipeline to release a new version and deploy to production.

variables:
  # Configuration to run the healthcheck container
  HEALTHCHECK_CONTAINER_RG: 'io-p-rg-common'
  HEALTHCHECK_CONTAINER_VNET: 'io-p-vnet-common'
  HEALTHCHECK_CONTAINER_SUBNET: 'azure-devops' 
  HEALTHCHECK_PATH: '/info' 

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor
  # Map of production apps to deploy to, in the form
  #   {logicName}: 
  #     appname: {name of the resource}
  #     rg: {name of the resource group}
  # Although it's a parameter, it's not intended to be edited at runtime.
  # It's here because variables only handle scalar values
  - name: 'PRODUCTION_APPS'
    displayName: ''
    type: object
    default:
      appbackendl1:
        appname: io-p-app-appbackendl1
        rg: io-p-rg-linux
      appbackendl2:
        appname: io-p-app-appbackendl2
        rg: io-p-rg-linux
      appbackendli:
        appname: io-p-app-appbackendli
        rg: io-p-rg-linux


  - name: 'OPENAPI_SPEC_PATHS'
    type: object
    default:
      api_auth: 
        openapi_spec_path: 'openapi/generated/api_auth.yaml'
        package_name: '@pagopa/io-backend-auth-sdk'
      api_backend: 
        openapi_spec_path: 'openapi/generated/api_backend.yaml'
        package_name: '@pagopa/io-backend-sdk'
      api_bonus: 
        openapi_spec_path: 'openapi/generated/api_bonus.yaml'
        package_name: '@pagopa/io-backend-bonus-sdk'
      api_bpd: 
        openapi_spec_path: 'openapi/generated/api_bpd.yaml'
        package_name: '@pagopa/io-backend-bpd-sdk'
      api_cgn_operator_search: 
        openapi_spec_path: 'openapi/generated/api_cgn_operator_search.yaml'
        package_name: '@pagopa/io-backend-cgn-operator-search-sdk'
      api_cgn: 
        openapi_spec_path: 'openapi/generated/api_cgn.yaml'
        package_name: '@pagopa/io-backend-cgn-sdk'
      api_eucovidcert: 
        openapi_spec_path: 'openapi/generated/api_eucovidcert.yaml'
        package_name: '@pagopa/io-backend-eucovidcert-sdk'
      api_fims: 
        openapi_spec_path: 'openapi/generated/api_fims.yaml'
        package_name: '@pagopa/io-backend-fims-sdk'
      api_myportal: 
        openapi_spec_path: 'openapi/generated/api_myportal.yaml'
        package_name: '@pagopa/io-backend-myportal-sdk'
      api_notifications: 
        openapi_spec_path: 'openapi/generated/api_notifications.yaml'
        package_name: '@pagopa/io-backend-notifications-sdk'
      api_pagopa: 
        openapi_spec_path: 'openapi/generated/api_pagopa.yaml'
        package_name: '@pagopa/io-backend-pagopa-sdk'
      api_parameters: 
        openapi_spec_path: 'openapi/generated/api_parameters.yaml'
        package_name: '@pagopa/io-backend-parameters-sdk'
      api_pn: 
        openapi_spec_path: 'openapi/generated/api_pn.yaml'
        package_name: '@pagopa/io-backend-pn-sdk'
      api_public: 
        openapi_spec_path: 'openapi/generated/api_public.yaml'
        package_name: '@pagopa/io-backend-public-sdk'
      api_session: 
        openapi_spec_path: 'openapi/generated/api_session.yaml'
        package_name: '@pagopa/io-backend-session-sdk'
      api_zendesk: 
        openapi_spec_path: 'openapi/generated/api_zendesk.yaml'
        package_name: '@pagopa/io-backend-zendesk-sdk'

# Only manual activations are intended
trigger: none
pr: none

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: 'windows-2019'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v18
      endpoint: 'pagopa'

stages:

  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch master 
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    condition:
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and(
            startsWith(variables['Build.SourceBranch'], 'refs/tags'),
            endsWith(variables['Build.SourceBranch'], '-RELEASE')
          )
        )
      )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        steps:
        - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
          - template: templates/node-github-release/template.yaml@pagopaCommons
            parameters:
              semver: '${{ parameters.RELEASE_SEMVER }}'
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)

        - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
          - script: |
              echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
            displayName: 'Skip release bundle'


  # Prepare Artifact
  - stage: Prepare_artifact
    dependsOn:
      - Release
    jobs:
      - job: 'prepare_artifact'
        steps:
          # Build application
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/master --> master
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}
          - script: |
              yarn predeploy
            displayName: 'Build'
  
          # Copy application to  
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              TargetFolder: '$(System.DefaultWorkingDirectory)/bundle'
              Contents: |
                **/*
                !.git/**/*
                !.vscode/**/*
                !.devops/**/*
                ![.]*
                !scripts/**/*
                !**/*.js.map
                !**/*.ts
                !*.md
                !docker-compose.yml
                !Dangerfile.ts
                !jest.config.js
                !local.settings.json
                !test
                !tslint.json
                !tsconfig.json                
            displayName: 'Copy deploy files'
          
          - publish: $(System.DefaultWorkingDirectory)/bundle
            artifact: Bundle

  # Deploy on staging slot
  - ${{ each app in parameters.PRODUCTION_APPS }}:
    - stage: Deploy_${{ app.Key }}_to_staging
      dependsOn:
        - Prepare_artifact
      jobs:
        - job: 'do_deploy_${{ app.Key }}'
          steps:
            - checkout: none
            - download: current
              artifact: Bundle

            - task: AzureWebApp@1
              inputs:
                azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
                resourceGroupName: '${{ app.Value.rg }}'
                appType: 'webApp'
                appName: '${{ app.Value.appname }}'
                package: '$(Pipeline.Workspace)/Bundle'
                deploymentMethod: 'auto'
                deployToSlotOrASE: true
                slotName: 'staging'
              displayName: Deploy to staging slot

  # Check that the staging instance is healthy
  - ${{ each app in parameters.PRODUCTION_APPS }}:
    - stage: Healthcheck_${{ app.Key }}
      pool:
        name: $(AGENT_POOL)
      dependsOn:
        - Deploy_${{ app.Key }}_to_staging
      jobs:
        - job: 'do_healthcheck_${{ app.Key }}'       
          steps:  
            - checkout: none
            - script: |
                # fails if response status is not 2xx
                curl -f 'https://${{ app.Value.appname }}-staging.azurewebsites.net/$(HEALTHCHECK_PATH)'
              displayName: 'Healthcheck'

  # Promote the staging instance to production
  - ${{ each app in parameters.PRODUCTION_APPS }}:
    - stage: Swap_${{ app.Key }}_to_production
      dependsOn:
        - Deploy_${{ app.Key }}_to_staging
        # Wait for every healthcheck to succeed
        # This implied that no app is swapped to prod if at least one healthcheck fails
        - ${{ each appInner in parameters.PRODUCTION_APPS }}:
          - Healthcheck_${{ appInner.Key }}
      jobs:
        - job: 'do_deploy_${{ app.Key }}'       
          steps:  
            - checkout: none
            - task: AzureAppServiceManage@0
              inputs:
                azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
                resourceGroupName: '${{ app.Value.rg }}'
                webAppName: '${{ app.Value.appname }}'
                sourceSlot: staging
                swapWithProduction: true
              displayName: Swap with production slot

  # Publish client SDKs to NPM
  - stage: PublishClientSDKstoNPM
    dependsOn: Release
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - ${{ each spec in parameters.OPENAPI_SPEC_PATHS }}:
        - job: publish_SDK_${{ spec.Key }}   
          steps:
          # Template for generating and deploying client SDk to NPM
          - template: templates/client-sdk-publish/template.yaml@pagopaCommons
            parameters:
              openapiSpecPath: '${{ spec.Value.openapi_spec_path }}'
              artifactName: 'Bundle_${{ spec.Key }}'
              sdkPackageName: '${{ spec.Value.package_name }}'