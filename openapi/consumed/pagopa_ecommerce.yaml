openapi: 3.0.1
info:
  title: Pagopa eCommerce payment requests service
  description: pagoPA ecommerce microservice to retrieve payment request data or to
    manage carts (consisting of a group of payment requests) with redirects to checkout
  contact:
    name: pagoPA - Touchpoints team
  version: 0.0.1
externalDocs:
  description: Design review
  url: https://pagopa.atlassian.net/wiki/spaces/I/pages/492339720/pagoPA+eCommerce+Design+Review
servers:
- url: https://${hostname}
security:
- ApiKeyAuth: []
tags:
- name: payment-requests
  description: Api's for performing verification on payment notices
  externalDocs:
    description: Technical specifications
    url: https://pagopa.atlassian.net/wiki/spaces/I/pages/611745793/-servizio+payment+requests+service
paths:
  /payment-requests/{rpt_id}:
    get:
      tags:
      - payment-requests
      summary: Verify single payment notice
      description: Api used to perform verify on payment notice by mean of Nodo call
      operationId: getPaymentRequestInfo
      parameters:
      - name: rpt_id
        in: path
        description: "Unique identifier for payment request, so the concatenation\
          \ of the fiscal code and notice number."
        required: true
        schema:
          pattern: "([a-zA-Z\\d]{1,35})|(RF\\d{2}[a-zA-Z\\d]{1,21})"
          type: string
      responses:
        "200":
          description: Payment request retrieved
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PaymentRequestsGetResponse'
        "400":
          description: Formally invalid input
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProblemJson'
        "401":
          description: "Unauthorized, access token missing or invalid"
          content: {}
        "404":
          description: Node cannot find the services needed to process this request
            in its configuration. This error is most likely to occur when submitting
            a non-existing RPT id.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PaymentInfoNotFoundResponse'
        "409":
          description: Conflict on payment status
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PaymentInfoConflictResponse'
        "502":
          description: PagoPA services are not available or request is rejected by
            PagoPa
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PaymentInfoBadGatewayResponse'
        "503":
          description: EC services are not available
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PartyConfigurationFaultPaymentProblemJson'
components:
  schemas:
    PaymentRequestsGetResponse:
      title: PaymentRequestsGetResponse
      required:
      - amount
      type: object
      properties:
        rptId:
          pattern: "([a-zA-Z\\d]{1,35})|(RF\\d{2}[a-zA-Z\\d]{1,21})"
          type: string
          description: Digital payment request id
        paFiscalCode:
          maxLength: 11
          minLength: 11
          type: string
          description: Fiscal code associated to the payment notice
        paName:
          maxLength: 140
          minLength: 1
          type: string
          description: Name of the payment notice issuer
        description:
          maxLength: 140
          minLength: 1
          type: string
          description: Payment notice description
        amount:
          maximum: 99999999
          minimum: 0
          type: integer
          description: Payment notice amount
        dueDate:
          pattern: "([0-9]{4})-(1[0-2]|0[1-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])"
          type: string
          description: Payment notice due date
          example: 2025-07-31
      description: Response with payment request information
    PaymentInfoConflictResponse:
      allOf:
      - $ref: '#/components/schemas/PaymentOngoingStatusFaultPaymentProblemJson'
      - $ref: '#/components/schemas/PaymentExpiredStatusFaultPaymentProblemJson'
      - $ref: '#/components/schemas/PaymentCanceledStatusFaultPaymentProblemJson'
      - $ref: '#/components/schemas/PaymentDuplicatedStatusFaultPaymentProblemJson'
      x-one-of: true
    PaymentInfoNotFoundResponse:
      allOf:
      - $ref: '#/components/schemas/ValidationFaultPaymentDataErrorProblemJson'
      - $ref: '#/components/schemas/ValidationFaultPaymentUnknownProblemJson'
      x-one-of: true
    PaymentInfoBadGatewayResponse:
      allOf:
      - $ref: '#/components/schemas/GatewayFaultPaymentProblemJson'
      - $ref: '#/components/schemas/ValidationFaultPaymentUnavailableProblemJson'
      x-one-of: true
    ValidationFaultPaymentUnavailableProblemJson:
      required:
      - faultCodeCategory
      - faultCodeDetail
      type: object
      properties:
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          type: string
          enum:
          - PAYMENT_UNAVAILABLE
        faultCodeDetail:
          $ref: '#/components/schemas/ValidationFaultPaymentUnavailable'
      description: |
        A PaymentProblemJson-like type specific for the GetPayment operations.
        Possible values of `detail_v2` are limited to faults pertaining to validation errors.
    ValidationFaultPaymentUnknownProblemJson:
      required:
      - faultCodeCategory
      - faultCodeDetail
      type: object
      properties:
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          type: string
          enum:
          - PAYMENT_UNKNOWN
        faultCodeDetail:
          $ref: '#/components/schemas/ValidationFaultPaymentUnknown'
      description: |
        A PaymentProblemJson-like type specific for the GetPayment operations.
        Possible values of `detail_v2` are limited to faults pertaining to validation errors.
    ValidationFaultPaymentDataErrorProblemJson:
      required:
      - faultCodeCategory
      - faultCodeDetail
      type: object
      properties:
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          type: string
          enum:
          - PAYMENT_DATA_ERROR
        faultCodeDetail:
          $ref: '#/components/schemas/ValidationFaultPaymentDataError'
      description: |
        A PaymentProblemJson-like type specific for the GetPayment operations.
        Possible values of `detail_v2` are limited to faults pertaining to validation errors.
    PaymentOngoingStatusFaultPaymentProblemJson:
      required:
      - faultCodeCategory
      - faultCodeDetail
      type: object
      properties:
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          type: string
          enum:
          - PAYMENT_ONGOING
        faultCodeDetail:
          $ref: '#/components/schemas/PaymentOngoingStatusFault'
      description: |
        A PaymentProblemJson-like type specific for the GetPayment and ActivatePayment operations.
        Possible values of `detail_v2` are limited to faults pertaining to Nodo errors related to payment status conflicts.
    PaymentExpiredStatusFaultPaymentProblemJson:
      required:
      - faultCodeCategory
      - faultCodeDetail
      type: object
      properties:
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          type: string
          enum:
          - PAYMENT_EXPIRED
        faultCodeDetail:
          $ref: '#/components/schemas/PaymentExpiredStatusFault'
      description: |
        A PaymentProblemJson-like type specific for the GetPayment and ActivatePayment operations.
        Possible values of `detail_v2` are limited to faults pertaining to Nodo errors related to payment status conflicts.
    PaymentCanceledStatusFaultPaymentProblemJson:
      required:
      - faultCodeCategory
      - faultCodeDetail
      type: object
      properties:
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          type: string
          enum:
          - PAYMENT_CANCELED
        faultCodeDetail:
          $ref: '#/components/schemas/PaymentCanceledStatusFault'
      description: |
        A PaymentProblemJson-like type specific for the GetPayment and ActivatePayment operations.
        Possible values of `detail_v2` are limited to faults pertaining to Nodo errors related to payment status conflicts.
    PaymentDuplicatedStatusFaultPaymentProblemJson:
      required:
      - faultCodeCategory
      - faultCodeDetail
      type: object
      properties:
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          type: string
          enum:
          - PAYMENT_DUPLICATED
        faultCodeDetail:
          $ref: '#/components/schemas/PaymentDuplicatedStatusFault'
      description: |
        A PaymentProblemJson-like type specific for the GetPayment and ActivatePayment operations.
        Possible values of `detail_v2` are limited to faults pertaining to Nodo errors related to payment status conflicts.
    GatewayFaultPaymentProblemJson:
      required:
      - faultCodeCategory
      - faultCodeDetail
      type: object
      properties:
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          type: string
          enum:
          - GENERIC_ERROR
        faultCodeDetail:
          $ref: '#/components/schemas/GatewayFault'
      description: |
        A PaymentProblemJson-like type specific for the GetPayment and ActivatePayment operations.
        Possible values of `detail_v2` are limited to faults pertaining to Nodo errors.
    PartyConfigurationFaultPaymentProblemJson:
      required:
      - faultCodeCategory
      - faultCodeDetail
      type: object
      properties:
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        faultCodeCategory:
          type: string
          enum:
          - DOMAIN_UNKNOWN
        faultCodeDetail:
          $ref: '#/components/schemas/PartyConfigurationFault'
      description: A PaymentProblemJson-like type specific for the GetPayment
    FaultCategory:
      type: string
      description: |
        Fault code categorization for the PagoPA Verifica and Attiva operations.
        Possible categories are:
        - `PAYMENT_DUPLICATED`
        - `PAYMENT_ONGOING`
        - `PAYMENT_EXPIRED`
        - `PAYMENT_UNAVAILABLE`
        - `PAYMENT_UNKNOWN`
        - `DOMAIN_UNKNOWN`
        - `PAYMENT_CANCELED`
        - `GENERIC_ERROR`
        - `PAYMENT_DATA_ERROR`
      enum:
      - PAYMENT_DUPLICATED
      - PAYMENT_ONGOING
      - PAYMENT_EXPIRED
      - PAYMENT_UNAVAILABLE
      - PAYMENT_UNKNOWN
      - DOMAIN_UNKNOWN
      - PAYMENT_CANCELED
      - GENERIC_ERROR
      - PAYMENT_DATA_ERROR
    PaymentOngoingStatusFault:
      type: string
      description: |
        Fault codes for errors related to payment attempts that cause conflict with the current payment status,
        such as a duplicated payment attempt or a payment attempt made while another attempt is still being processed.
        Should be mapped to 409 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PPT_PAGAMENTO_IN_CORSO`
        - `PAA_PAGAMENTO_IN_CORSO`
      enum:
      - PPT_PAGAMENTO_IN_CORSO
      - PAA_PAGAMENTO_IN_CORSO
    PaymentExpiredStatusFault:
      type: string
      description: |
        Fault codes for errors related to payment attempts that cause conflict with the current payment status,
        such as a duplicated payment attempt or a payment attempt made while another attempt is still being processed.
        Should be mapped to 409 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PAA_PAGAMENTO_SCADUTO`
      enum:
      - PAA_PAGAMENTO_SCADUTO
    PaymentCanceledStatusFault:
      type: string
      description: |
        Fault codes for errors related to payment attempts that cause conflict with the current payment status,
        such as a duplicated payment attempt or a payment attempt made while another attempt is still being processed.
        Should be mapped to 409 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PAA_PAGAMENTO_ANNULLATO`
      enum:
      - PAA_PAGAMENTO_ANNULLATO
    PaymentDuplicatedStatusFault:
      type: string
      description: |
        Fault codes for errors related to payment attempts that cause conflict with the current payment status,
        such as a duplicated payment attempt or a payment attempt made while another attempt is still being processed.
        Should be mapped to 409 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PAA_PAGAMENTO_DUPLICATO`
        - `PPT_PAGAMENTO_DUPLICATO`
      enum:
      - PAA_PAGAMENTO_DUPLICATO
      - PPT_PAGAMENTO_DUPLICATO
    ValidationFaultPaymentUnavailable:
      type: string
      description: |
        Fault codes for errors related to well-formed requests to ECs not present inside Nodo, should be mapped to 404 HTTP status code.
        Most of the time these are generated when users input a wrong fiscal code or notice number.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PPT_PSP_SCONOSCIUTO`
        - `PPT_PSP_DISABILITATO`
        - `PPT_INTERMEDIARIO_PSP_SCONOSCIUTO`
        - `PPT_INTERMEDIARIO_PSP_DISABILITATO`
        - `PPT_CANALE_SCONOSCIUTO`
        - `PPT_CANALE_DISABILITATO`
        - `PPT_AUTENTICAZIONE`
        - `PPT_AUTORIZZAZIONE`
        - `PPT_DOMINIO_DISABILITATO`
        - `PPT_INTERMEDIARIO_PA_DISABILITATO`
        - `PPT_STAZIONE_INT_PA_DISABILITATA`
        - `PPT_CODIFICA_PSP_SCONOSCIUTA`
        - `PPT_SEMANTICA`
        - `PPT_SYSTEM_ERROR`
        - `PAA_SEMANTICA`
      enum:
      - PPT_PSP_SCONOSCIUTO
      - PPT_PSP_DISABILITATO
      - PPT_INTERMEDIARIO_PSP_SCONOSCIUTO
      - PPT_INTERMEDIARIO_PSP_DISABILITATO
      - PPT_CANALE_SCONOSCIUTO
      - PPT_CANALE_DISABILITATO
      - PPT_AUTENTICAZIONE
      - PPT_AUTORIZZAZIONE
      - PPT_DOMINIO_DISABILITATO
      - PPT_INTERMEDIARIO_PA_DISABILITATO
      - PPT_STAZIONE_INT_PA_DISABILITATA
      - PPT_CODIFICA_PSP_SCONOSCIUTA
      - PPT_SEMANTICA
      - PPT_SYSTEM_ERROR
      - PAA_SEMANTICA
    ValidationFaultPaymentDataError:
      type: string
      description: |
        Fault codes for errors related to well-formed requests to ECs not present inside Nodo, should be mapped to 404 HTTP status code.
        Most of the time these are generated when users input a wrong fiscal code or notice number.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PPT_SINTASSI_EXTRAXSD`
        - `PPT_SINTASSI_XSD`
        - `PPT_DOMINIO_SCONOSCIUTO`
        - `PPT_STAZIONE_INT_PA_SCONOSCIUTA`
      enum:
      - PPT_SINTASSI_EXTRAXSD
      - PPT_SINTASSI_XSD
      - PPT_DOMINIO_SCONOSCIUTO
      - PPT_STAZIONE_INT_PA_SCONOSCIUTA
    ValidationFaultPaymentUnknown:
      type: string
      description: |
        Fault codes for errors related to well-formed requests to ECs not present inside Nodo, should be mapped to 404 HTTP status code.
        Most of the time these are generated when users input a wrong fiscal code or notice number.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PAA_PAGAMENTO_SCONOSCIUTO`
      enum:
      - PAA_PAGAMENTO_SCONOSCIUTO
    GatewayFault:
      type: string
      description: |
        Fault codes for generic downstream services errors, should be mapped to 502 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
    PartyConfigurationFault:
      type: string
      description: |
        Fault codes for fatal errors from ECs, should be mapped to 503 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PPT_STAZIONE_INT_PA_IRRAGGIUNGIBILE`
        - `PPT_STAZIONE_INT_PA_TIMEOUT`
        - `PPT_STAZIONE_INT_PA_ERRORE_RESPONSE`
        - `PPT_IBAN_NON_CENSITO`
        - `PAA_SINTASSI_EXTRAXSD`
        - `PAA_SINTASSI_XSD`
        - `PAA_ID_DOMINIO_ERRATO`
        - `PAA_ID_INTERMEDIARIO_ERRATO`
        - `PAA_STAZIONE_INT_ERRATA`
        - `PAA_ATTIVA_RPT_IMPORTO_NON_VALIDO`
        - `PPT_ERRORE_EMESSO_DA_PAA`
        - `PAA_SYSTEM_ERROR`
      enum:
      - PPT_STAZIONE_INT_PA_IRRAGGIUNGIBILE
      - PPT_STAZIONE_INT_PA_TIMEOUT
      - PPT_STAZIONE_INT_PA_ERRORE_RESPONSE
      - PPT_IBAN_NON_CENSITO
      - PAA_SINTASSI_EXTRAXSD
      - PAA_SINTASSI_XSD
      - PAA_ID_DOMINIO_ERRATO
      - PAA_ID_INTERMEDIARIO_ERRATO
      - PAA_STAZIONE_INT_ERRATA
      - PAA_ATTIVA_RPT_IMPORTO_NON_VALIDO
      - PPT_ERRORE_EMESSO_DA_PAA
      - PAA_SYSTEM_ERROR
    ProblemJson:
      type: object
      properties:
        type:
          type: string
          description: |
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          format: uri
          example: https://example.com/problem/constraint-violation
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          $ref: '#/components/schemas/HttpStatusCode'
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: There was an error processing the request
        instance:
          type: string
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
          format: uri
    HttpStatusCode:
      maximum: 600
      minimum: 100
      type: integer
      description: |
        The HTTP status code generated by the origin server for this occurrence
        of the problem.
      format: int32
      example: 200
    PaymentStatusFault:
      type: string
      description: |
        Fault codes for errors related to payment attempts that cause conflict with the current payment status,
        such as a duplicated payment attempt or a payment attempt made while another attempt is still being processed.
        Should be mapped to 409 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PPT_PAGAMENTO_IN_CORSO`
        - `PAA_PAGAMENTO_IN_CORSO`
        - `PPT_PAGAMENTO_DUPLICATO`
        - `PAA_PAGAMENTO_DUPLICATO`
        - `PAA_PAGAMENTO_SCADUTO`
      enum:
      - PPT_PAGAMENTO_IN_CORSO
      - PAA_PAGAMENTO_IN_CORSO
      - PPT_PAGAMENTO_DUPLICATO
      - PAA_PAGAMENTO_DUPLICATO
      - PAA_PAGAMENTO_SCADUTO
    ValidationFault:
      type: string
      description: |
        Fault codes for errors related to well-formed requests to ECs not present inside Nodo, should be mapped to 404 HTTP status code.
        Most of the time these are generated when users input a wrong fiscal code or notice number.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PAA_PAGAMENTO_SCONOSCIUTO`
        - `PPT_DOMINIO_SCONOSCIUTO`
        - `PPT_INTERMEDIARIO_PA_SCONOSCIUTO`
        - `PPT_STAZIONE_INT_PA_SCONOSCIUTA`
        - `PAA_PAGAMENTO_ANNULLATO`
      enum:
      - PAA_PAGAMENTO_SCONOSCIUTO
      - PPT_DOMINIO_SCONOSCIUTO
      - PPT_INTERMEDIARIO_PA_SCONOSCIUTO
      - PPT_STAZIONE_INT_PA_SCONOSCIUTA
      - PAA_PAGAMENTO_ANNULLATO
    PartyTimeoutFault:
      type: string
      description: |
        Fault codes for timeout errors, should be mapped to 504 HTTP status code.
        For further information visit https://docs.pagopa.it/gestionedeglierrori/struttura-degli-errori/fault-code.
        Possible fault codes are:
        - `PPT_STAZIONE_INT_PA_TIMEOUT`
        - `PPT_STAZIONE_INT_PA_IRRAGGIUNGIBILE`
        - `PPT_STAZIONE_INT_PA_SERVIZIO_NONATTIVO`
        - `GENERIC_ERROR`
      enum:
      - PPT_STAZIONE_INT_PA_TIMEOUT
      - PPT_STAZIONE_INT_PA_IRRAGGIUNGIBILE
      - PPT_STAZIONE_INT_PA_SERVIZIO_NONATTIVO
      - GENERIC_ERROR
    CartRequest:
      required:
      - paymentNotices
      - returnUrls
      type: object
      properties:
        emailNotice:
          type: string
          description: Email to which send the payment receipt
          format: email
          example: my_email@mail.it
        paymentNotices:
          maxItems: 5
          minItems: 1
          type: array
          description: List of payment notices in the cart
          example:
          - noticeNumber: "302012387654312384"
            fiscalCode: "77777777777"
            amount: 10000
            companyName: companyName
            description: description
          - noticeNumber: "302012387654312385"
            fiscalCode: "77777777777"
            amount: 5000
            companyName: companyName
            description: description
          items:
            $ref: '#/components/schemas/PaymentNotice'
        returnUrls:
          required:
          - returnCancelUrl
          - returnErrorUrl
          - returnOkUrl
          type: object
          properties:
            returnOkUrl:
              type: string
              description: Return URL in case of payment operation is completed successfully
              format: uri
              example: https://www.comune.di.prova.it/pagopa/success.html
            returnCancelUrl:
              type: string
              description: Return URL in case of payment operation is cancelled
              format: uri
              example: https://www.comune.di.prova.it/pagopa/cancel.html
            returnErrorUrl:
              type: string
              description: Return URL in case an error occurred during payment operation
                processing
              format: uri
              example: https://www.comune.di.prova.it/pagopa/error.html
          description: Structure containing all the returning URL's to which user
            will be redirect after payment process has been completed
        idCart:
          type: string
          example: id_cart
        allCCP:
          type: boolean
          example: false
      description: Cart request body
    PaymentNotice:
      required:
      - amount
      - companyName
      - description
      - fiscalCode
      - noticeNumber
      type: object
      properties:
        noticeNumber:
          maxLength: 18
          minLength: 18
          type: string
          description: Payment notice number
        fiscalCode:
          maxLength: 11
          minLength: 11
          type: string
          description: Payment notice fiscal code
        amount:
          minimum: 1
          type: integer
          description: Payment notice amount
        companyName:
          maxLength: 140
          type: string
          description: Payment notice company name
        description:
          maxLength: 140
          type: string
          description: Payment notice description
      description: Payment notice informations
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: Ocp-Apim-Subscription-Key
      in: header
x-original-swagger-version: "2.0"
